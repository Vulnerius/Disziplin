# nginx.conf (Die zentrale Proxy-Konfiguration im nginx-proxy Container)

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/json;
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Upstream für den Frontend Kubernetes Service (ClusterIP)
    upstream frontend_service {
        server frontend-app-service:3000;
    }

    # Upstream für den Backend Kubernetes Service (ClusterIP)
    upstream backend_service {
        server backend-app-service:8080;
    }

    server {
        listen 80;
        server_name eevee 192.168.2.111; # <--- Ersetze dies durch deine Domain/IPs

        # Regel für die Backend API (alles unter /api/)
        location /api/ {
            #rewrite ^/api/(.*)$ /$1 break; # Entfernt das /api/ Präfix für das Backend
            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # CORS-Header sind hier wichtig, da der Proxy die Origin ändert.
            # Aber besser, das Backend setzt CORS selbst korrekt.
        }

        # Regel für das Frontend (alles andere)
        location / {
            proxy_pass http://frontend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Wichtig für SPAs im History Mode:
            # Versucht die Datei zu finden, sonst leitet es an index.html weiter
            # Nginx in diesem Proxy leitet an den Nginx im Frontend-Container weiter,
            # der dann try_files macht. Hier brauchen wir das nur, wenn der Proxy selbst statische
            # Dateien hosten würde. In diesem Fall wird der gesamte Request an den Frontend_service gepasst,
            # dessen Nginx dann die try_files Regel anwendet.
        }

        # Optional: Cache-Kontrolle für statische Assets (leitet sie auch über den Frontend-Service)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|woff|woff2|ttf|svg|eot)$ {
            proxy_pass http://frontend_service;
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
    }

    # Optional: Server Block für HTTPS (später, mit Certs)
    # server {
    #     listen 443 ssl;
    #     server_name your-domain.de;
    #
    #     ssl_certificate /etc/nginx/certs/your-domain.crt;
    #     ssl_certificate_key /etc/nginx/certs/your-domain.key;
    #     # ... weitere SSL-Einstellungen
    #
    #     # ... proxy_pass Regeln wie oben ...
    # }
}